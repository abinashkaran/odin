package valhalla.odin;

message TripPath {

  message LatLng {
    optional float lat = 1;
    optional float lng = 2;
  }
 
  message Location {
    enum Type {
      kBreak = 0;
      kThrough = 1;
    }
    
    enum SideOfStreet {
      kNone = 0;
      kLeft = 1;
      kRight = 2;
    }

    optional LatLng ll = 1;
    optional Type type = 2;
    optional uint32 heading = 3;      // 0-359
    optional string name = 4;
    optional string street = 5;    
    optional string city = 6;    
    optional string state = 7;
    optional string postal_code = 8;    
    optional string country = 9;    
    optional string date_time = 10;   // ISO 8601 date/time YYYY-MM-DDThh:mm
    optional SideOfStreet side_of_street = 11;
  }

  message Sign {
    repeated string exit_number = 1;  // 67B
    repeated string exit_branch = 2;  // I 95 North
    repeated string exit_toward = 3;  // New York
    repeated string exit_name = 4;    // Not used much in US; Used in Canada
  }

  enum Traversability {
    kNone = 0;
    kForward = 1;
    kBackward = 2;
    kBoth = 3;
  }

  enum RoadClass {
    kMotorway = 0;
    kTrunk = 1;
    kPrimary = 2;
    kSecondary = 3;
    kTertiary = 4;
    kUnclassified = 5;
    kResidential = 6;
    kServiceOther = 7;
  }

  enum TravelMode {
    kDrive = 0;
    kPedestrian = 1;
    kBicycle = 2;
    kTransit = 3;
  }

  // TODO: review and update as needed
  enum VehicleType {
    kCar = 0;
    kMotorcycle = 1;
    kFourWheelDrive = 2;
    kTractorTrailers = 3;
  }

  // TODO: review and update as needed
  enum PedestrianType {
    kFoot = 0;
    kWheelChair = 1;
    kSegway = 2;
  }

  enum BicycleType {
    kRoad = 0;
    kHybrid = 1;
    kCity = 2;
    kCross = 3;
    kMountain = 4;
  }
  
  enum TransitType {
    kTram = 0;
    kMetro = 1;
    kRail = 2;
    kBus = 3;
    kFerry = 4;
    kCableCar = 5;
    kGondola = 6;
    kFunicular = 7;
  }

  message TransitRouteInfo {
    optional string onestop_id = 1;
    optional uint32 block_id = 2;
    optional uint32 trip_id = 3;
    optional string short_name = 4;
    optional string long_name = 5;
    optional string headsign = 6;
    optional uint32 color = 7;
    optional uint32 text_color = 8;
    optional string description = 9;
    optional string operator_onestop_id = 10;
    optional string operator_name = 11;
    optional string operator_url = 12;
  }

  message Edge {
    repeated string name = 1;               // street names
    optional float length = 2;              // km
    optional float speed = 3;               // km/h
    optional RoadClass road_class = 4;
    optional uint32 begin_heading = 5;      // 0-359
    optional uint32 end_heading = 6;        // 0-359
    optional uint32 begin_shape_index = 7;  // inclusive
    optional uint32 end_shape_index = 8;    // inclusive
    optional Traversability traversability = 9;
    optional bool ramp = 10;
    optional bool turn_channel = 11;
    optional bool ferry = 12;
    optional bool rail_ferry = 13;
    optional bool toll = 14;
    optional bool unpaved = 15;
    optional bool tunnel = 16;
    optional bool bridge = 17;
    optional bool roundabout = 18;
    optional bool internal_intersection = 19;
    optional uint32 end_node_index = 20;
    optional Sign sign = 21;
    optional TravelMode travel_mode = 22;
    optional VehicleType vehicle_type = 23;
    optional PedestrianType pedestrian_type = 24;
    optional BicycleType bicycle_type = 25;
    optional TransitType transit_type = 26;
    optional bool drive_on_right = 27 [default = true];
    optional bool road = 28;                 // TODO: Use enum?
    optional bool track = 29;
    optional bool driveway = 30;
    optional bool alley = 31;
    optional bool parking_aisle = 32;
    optional bool emergency_access = 33;
    optional bool drive_thru = 34;
    optional bool culdesac = 35;
    optional bool footway = 36;
    optional bool stairs = 37;
    optional bool cycleway = 38;
    optional bool mountain_bike = 39;
    optional bool rail = 40;
    optional bool bus = 41;
    optional bool transit_connection = 42;
    optional bool other = 43;
    optional TransitRouteInfo transit_route_info = 44;
  }

  message IntersectingEdge {
    optional uint32 begin_heading = 1;       // 0-359
    optional bool prev_name_consistency = 2;
    optional bool curr_name_consistency = 3;
    optional Traversability driveability = 4;
    optional Traversability cyclability = 5;
    optional Traversability walkability = 6;
  }

  message TransitStopInfo {
    enum Type {
      kStop = 0;
      kStation = 1;
    }

    optional Type type = 1;                  // The type of stop (station or simple stop)
    optional string onestop_id = 2;          // Unique transitland ID
    optional string name = 3;                // The name of the stop
    optional string arrival_date_time = 4;   // ISO 8601 arrival date/time YYYY-MM-DDThh:mm
    optional string departure_date_time = 5; // ISO 8601 departure date/time YYYY-MM-DDThh:mm
    optional bool is_parent_stop = 6;        // true if this is a parent stop
    optional bool assumed_schedule = 7;      // true if the times are based on an assumed schedule
    optional LatLng ll = 8;                  // Latitude, longitude of the transit stop
  }

  message Node {
    optional Edge edge = 1;
    repeated IntersectingEdge intersecting_edge = 2; 
    optional uint32 elapsed_time = 3;        // seconds from start of leg
    optional uint32 admin_index = 4;         // index into the admin list
    optional bool street_intersection = 5;   // Regular intersection of 2 roads
    optional bool gate = 6;                  // Gate or rising bollard
    optional bool bollard = 7;               // Bollard (fixed obstruction)
    optional bool toll_booth = 8;            // toll booth / fare collection
    optional bool bike_share = 9;            // Bike share location
    optional bool parking = 10;              // Parking location
    optional bool motorway_junction = 11;    // Motorway junction
    optional bool fork = 12;                 // Fork
    optional TransitStopInfo transit_stop_info = 13;
  }

  message Admin {
    optional string country_code = 1;
    optional string country_text = 2;
    optional string state_code = 3;
    optional string state_text = 4;
  }
  
  optional uint64 trip_id = 1;
  optional uint32 leg_id = 2;
  optional uint32 leg_count = 3;
  repeated Location location = 4;
  repeated Node node = 5;
  repeated Admin admin = 6;
  optional string shape = 7;

}

